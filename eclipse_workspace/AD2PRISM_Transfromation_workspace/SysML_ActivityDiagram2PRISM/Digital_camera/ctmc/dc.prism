// This model is automatically generated from the PRISM model 

// All changes made will be lost after regeneration. 
 
// PRISM Output

ctmc

const int INACTIVE = (-1);
const double mean_duration = (0.1);
const int dc_I0_E0_I0 = (0);
const int dc_I0_E0_TurnOn = (1);
const int dc_I0_E0_F1 = (2);
const int dc_I0_E0_AutoFocus = (3);
const int dc_I0_E0_D1 = (4);
const int dc_I0_E0_M1 = (5);
const int dc_I0_E0_J2 = (6);
const int dc_F1_E3_DetLight = (0);
const int dc_F1_E3_D2 = (1);
const int dc_F1_E3_J2 = (2);
const int dc_F1_E3_J1 = (3);
const int dc_F1_E3_M3 = (4);
const int dc_F1_E4_D3 = (0);
const int dc_F1_E4_ChargedFlash = (1);
const int dc_F1_E4_M2 = (2);
const int dc_F1_E4_J1 = (3);
const int dc_F1_E4_F2 = (4);
const int dc_F1_E4_M3 = (5);
const int dc_F2_E18_Flash = (0);
const int dc_F2_E18_FF = (1);
const int dc_M3_TakePicture = (0);
const int dc_M3_WriteMem = (1);
const int dc_M3_M1 = (2);
const int dc_M1_TurnOff = (0);
const int dc_M1_AF = (1);
const double p1 = (0.4);
const double p2 = (0.3);
const int r1 = (2);



formula dc_to_be_terminated = dc_M1_to_be_terminated;		
formula default_rate = ((1.0)/mean_duration);		
		



rewards "R1"
	[dc_I0_E0_AutoFocus] ((dc_I0_E0_pc=dc_I0_E0_AutoFocus)) : (1.5);	
	[dc_F1_E3_DetLight] ((dc_F1_E3_pc=dc_F1_E3_DetLight)) : (2.5);	
endrewards


rewards "R3"
	[dc_F1_E3_DetLight] ((dc_F1_E3_pc=dc_F1_E3_DetLight)) : (r1*(2));	
endrewards


rewards "R2"
	[dc_F1_E3_DetLight] ((dc_F1_E3_pc=dc_F1_E3_DetLight)) : (2.22);	
endrewards




module dc_I0_E0
    dc_I0_E0_pc : [-1..6] init 0;
    dc_terminated : bool init false;

    [dc_I0_E0_I0] ((dc_I0_E0_pc=dc_I0_E0_I0))&(! (dc_to_be_terminated)) -> default_rate:(dc_I0_E0_pc'=dc_I0_E0_TurnOn);

    [dc_I0_E0_TurnOn] ((dc_I0_E0_pc=dc_I0_E0_TurnOn))&(! (dc_to_be_terminated)) -> ((1.0)/(2.0)):(dc_I0_E0_pc'=dc_I0_E0_F1);

    [dc_F1] ((dc_I0_E0_pc=dc_I0_E0_F1))&(! (dc_to_be_terminated)) -> default_rate:(dc_I0_E0_pc'=dc_I0_E0_AutoFocus);

    [dc_I0_E0_AutoFocus] ((dc_I0_E0_pc=dc_I0_E0_AutoFocus))&(! (dc_to_be_terminated)) -> ((1.0)/(1.5)):(dc_I0_E0_pc'=dc_I0_E0_D1);

    [dc_I0_E0_D1] ((dc_I0_E0_pc=dc_I0_E0_D1))&(! (dc_to_be_terminated)) -> (default_rate*(0.8)):(dc_I0_E0_pc'=dc_I0_E0_J2) + (default_rate*(0.2)):(dc_I0_E0_pc'=dc_I0_E0_M1);

    [dc_M1_E9] ((dc_I0_E0_pc=dc_I0_E0_M1))&(! (dc_to_be_terminated)) -> default_rate:(dc_I0_E0_pc'=INACTIVE);

    [dc_J2] ((dc_I0_E0_pc=dc_I0_E0_J2))&(! (dc_to_be_terminated)) -> default_rate:(dc_I0_E0_pc'=INACTIVE);

    [dc_terminate] (dc_to_be_terminated)&(! (dc_terminated)) -> default_rate:(dc_I0_E0_pc'=INACTIVE)&(dc_terminated'=true);

    [] ((dc_I0_E0_pc=INACTIVE))&((dc_terminated)&(! (dc_to_be_terminated))) -> default_rate:true;

endmodule

module dc_F1_E3
    dc_F1_E3_pc : [-1..4] init INACTIVE;

    [dc_F1] ((dc_F1_E3_pc=INACTIVE))&(! (dc_to_be_terminated)) -> default_rate:(dc_F1_E3_pc'=dc_F1_E3_DetLight);

    [dc_F1_E3_DetLight] ((dc_F1_E3_pc=dc_F1_E3_DetLight))&(! (dc_to_be_terminated)) -> ((1.0)/(0.5)):(dc_F1_E3_pc'=dc_F1_E3_D2);

    [dc_F1_E3_D2] ((dc_F1_E3_pc=dc_F1_E3_D2))&(! (dc_to_be_terminated)) -> (default_rate*p1):(dc_F1_E3_pc'=dc_F1_E3_J2) + (default_rate*((1.0)-p1)):(dc_F1_E3_pc'=dc_F1_E3_J1);

    [dc_J2] ((dc_F1_E3_pc=dc_F1_E3_J2))&(! (dc_to_be_terminated)) -> default_rate:(dc_F1_E3_pc'=dc_F1_E3_M3);

    [dc_J1] ((dc_F1_E3_pc=dc_F1_E3_J1))&(! (dc_to_be_terminated)) -> default_rate:(dc_F1_E3_pc'=INACTIVE);

    [dc_M3_E15] ((dc_F1_E3_pc=dc_F1_E3_M3))&(! (dc_to_be_terminated)) -> default_rate:(dc_F1_E3_pc'=INACTIVE);

    [dc_terminate] dc_to_be_terminated -> default_rate:(dc_F1_E3_pc'=INACTIVE);

endmodule

module dc_F1_E4
    dc_F1_E4_pc : [-1..5] init INACTIVE;

    [dc_F1] ((dc_F1_E4_pc=INACTIVE))&(! (dc_to_be_terminated)) -> default_rate:(dc_F1_E4_pc'=dc_F1_E4_D3);

    [dc_F1_E4_D3] ((dc_F1_E4_pc=dc_F1_E4_D3))&(! (dc_to_be_terminated)) -> (default_rate*p2):(dc_F1_E4_pc'=dc_F1_E4_M2) + (default_rate*((1.0)-p2)):(dc_F1_E4_pc'=dc_F1_E4_ChargedFlash);

    [dc_F1_E4_ChargedFlash] ((dc_F1_E4_pc=dc_F1_E4_ChargedFlash))&(! (dc_to_be_terminated)) -> ((1.0)/(3.0)):(dc_F1_E4_pc'=dc_F1_E4_M2);

    [dc_F1_E4_M2] ((dc_F1_E4_pc=dc_F1_E4_M2))&(! (dc_to_be_terminated)) -> default_rate:(dc_F1_E4_pc'=dc_F1_E4_J1);

    [dc_J1] ((dc_F1_E4_pc=dc_F1_E4_J1))&(! (dc_to_be_terminated)) -> default_rate:(dc_F1_E4_pc'=dc_F1_E4_F2);

    [dc_F2] ((dc_F1_E4_pc=dc_F1_E4_F2))&(! (dc_to_be_terminated)) -> default_rate:(dc_F1_E4_pc'=dc_F1_E4_M3);

    [dc_M3_E17] ((dc_F1_E4_pc=dc_F1_E4_M3))&(! (dc_to_be_terminated)) -> default_rate:(dc_F1_E4_pc'=INACTIVE);

    [dc_terminate] dc_to_be_terminated -> default_rate:(dc_F1_E4_pc'=INACTIVE);

endmodule

module dc_F2_E18
    dc_F2_E18_pc : [-1..1] init INACTIVE;

    [dc_F2] ((dc_F2_E18_pc=INACTIVE))&(! (dc_to_be_terminated)) -> default_rate:(dc_F2_E18_pc'=dc_F2_E18_Flash);

    [dc_F2_E18_Flash] ((dc_F2_E18_pc=dc_F2_E18_Flash))&(! (dc_to_be_terminated)) -> default_rate:(dc_F2_E18_pc'=dc_F2_E18_FF);

    [dc_F2_E18_FF] ((dc_F2_E18_pc=dc_F2_E18_FF))&(! (dc_to_be_terminated)) -> default_rate:(dc_F2_E18_pc'=INACTIVE);

    [dc_terminate] dc_to_be_terminated -> default_rate:(dc_F2_E18_pc'=INACTIVE);

endmodule

module dc_M3
    dc_M3_pc : [-1..2] init INACTIVE;

    [dc_M3_E17] ((dc_M3_pc=INACTIVE))&(! (dc_to_be_terminated)) -> default_rate:(dc_M3_pc'=dc_M3_TakePicture);

    [dc_M3_E15] ((dc_M3_pc=INACTIVE))&(! (dc_to_be_terminated)) -> default_rate:(dc_M3_pc'=dc_M3_TakePicture);

    [dc_M3_TakePicture] ((dc_M3_pc=dc_M3_TakePicture))&(! (dc_to_be_terminated)) -> default_rate:(dc_M3_pc'=dc_M3_WriteMem);

    [dc_M3_WriteMem] ((dc_M3_pc=dc_M3_WriteMem))&(! (dc_to_be_terminated)) -> ((1.0)/(2.5)):(dc_M3_pc'=dc_M3_M1);

    [dc_M1_E22] ((dc_M3_pc=dc_M3_M1))&(! (dc_to_be_terminated)) -> default_rate:(dc_M3_pc'=INACTIVE);

    [dc_terminate] dc_to_be_terminated -> default_rate:(dc_M3_pc'=INACTIVE);

endmodule

module dc_M1
    dc_M1_pc : [-1..1] init INACTIVE;
    dc_M1_to_be_terminated : bool init false;

    [dc_M1_E9] ((dc_M1_pc=INACTIVE))&(! (dc_to_be_terminated)) -> default_rate:(dc_M1_pc'=dc_M1_TurnOff);

    [dc_M1_E22] ((dc_M1_pc=INACTIVE))&(! (dc_to_be_terminated)) -> default_rate:(dc_M1_pc'=dc_M1_TurnOff);

    [dc_M1_TurnOff] ((dc_M1_pc=dc_M1_TurnOff))&(! (dc_to_be_terminated)) -> default_rate:(dc_M1_pc'=dc_M1_AF)&(dc_M1_to_be_terminated'=true);

    [dc_terminate] dc_to_be_terminated -> default_rate:(dc_M1_pc'=INACTIVE)&(dc_M1_to_be_terminated'=false);

endmodule


