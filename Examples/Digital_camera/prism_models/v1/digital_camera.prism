// for new figure

//Create modules for the branches of the forks
dtmc

const int main_i0 = 0;
const int main_TurnOn = 1;
const int main_F1 = 2;
const int main_AutoFocus = 3;
const int main_D1 = 4;
const int main_M1 = 5;
const int main_J2 = 6;
const int main_M3 = 7;

module main
   pc0 : [-1..7] init 0;
   
   [i0] (pc0=main_i0) -> (pc0'=main_TurnOn);
   [TurnOn] (pc0=main_TurnOn) -> (pc0'=main_F1);
   [F1] (pc0=main_F1) -> (pc0'=main_AutoFocus);
   [AutoFocus] (pc0=main_AutoFocus) -> (pc0'=main_D1);
   [D1] (pc0=main_D1) -> 0.2:(pc0'=main_M1) + 0.8:(pc0'=main_J2);
   [M1_1] (pc0=main_M1) -> (pc0'=-1);
   [J2] (pc0=main_J2) -> (pc0'=main_M3);
   [M3_1] (pc0=main_M3) -> (pc0'=-1);
   [Terminate] (true) ->(pc0'=-1);
endmodule

const int F1_2_DetLight = 0;
const int F1_2_D2 = 1;
const int F1_2_J2 = 2;
const int F1_2_J1 = 3;
const int F1_2_F2 = 4;
const int F1_2_M3 = 5;

module F1_2
   F1_2_pc : [-1..5] init -1;
   
   [F1] (F1_2_pc=-1) -> (F1_2_pc'=F1_2_DetLight);
   [DetLight] (F1_2_pc=F1_2_DetLight) -> (F1_2_pc'=F1_2_D2);
   [D2] (F1_2_pc=F1_2_D2) -> 0.4:(F1_2_pc'=F1_2_J2) + 0.6:(F1_2_pc'=F1_2_J1);
   [J2] (F1_2_pc=F1_2_J2) -> (F1_2_pc'=-1);
   [J1] (F1_2_pc=F1_2_J1) -> (F1_2_pc'=F1_2_F2);
   [F2] (F1_2_pc=F1_2_F2) -> (F1_2_pc'=F1_2_M3);
   [M3_2] (F1_2_pc=F1_2_M3) -> (F1_2_pc'=-1);
   [Terminate] true -> (F1_2_pc'=-1);
endmodule

const int F1_3_D3 = 0;
const int F1_3_ChargeFlash = 1;
const int F1_3_M2 = 2;
const int F1_3_J1 = 3;
module F1_3
   F1_3_pc : [-1..3] init -1;
   
   [F1] (F1_3_pc=-1) -> (F1_3_pc'=F1_3_D3);
   [D3] (F1_3_pc=F1_3_D3) -> 0.3:(F1_3_pc'=F1_3_M2) + 0.7:(F1_3_pc'=F1_3_ChargeFlash);
   [ChargeFlash] (F1_3_pc=F1_3_ChargeFlash) -> (F1_3_pc'=F1_3_M2);
   [M2] (F1_3_pc=F1_3_M2) -> (F1_3_pc'=F1_3_J1);
   [J1] (F1_3_pc=F1_3_J1) -> (F1_3_pc'=-1);
   [Terminate] (true) -> (F1_3_pc'=-1);
endmodule


const int F2_2_Flash = 0;
module F2_2
    F2_2_pc: [-1..0] init -1;

    [F2] (F2_2_pc=-1) -> (F2_2_pc'=F2_2_Flash);
    [Flash] (F2_2_pc=F2_2_Flash) -> (F2_2_pc'=-1);
    [Terminate] true -> (F2_2_pc'=-1);
endmodule

//  Create modules for all the merge nodes execept the ones whose all going-in branches are enabled within the same module 



const int M3_TakePicture = 0;
const int M3_WriteMem = 1;
const int M3_M1 = 2;
module M3
   M3_pc: [-1..2] init -1;

   [M3_1] (M3_pc=-1) -> (M3_pc'=M3_TakePicture);
   [M3_2] (M3_pc=-1) -> (M3_pc'=M3_TakePicture);
   [TakePicture] (M3_pc=M3_TakePicture) -> (M3_pc'=M3_WriteMem);
   [WriteMem] (M3_pc=M3_WriteMem) -> (M3_pc'=M3_M1);
   [M1_2] (M3_pc=M3_M1) -> (M3_pc'=-1);
   [Terminate] true -> (M3_pc'=-1);
endmodule

const int M1_TurnOff = 0;
const int M1_ActivityFinal = 1;
const int M1_Terminated = 2;
module M1
   M1_pc: [-1..2] init -1;

   [M1_1] (M1_pc=-1) -> (M1_pc'=M1_TurnOff);
   [M1_2] (M1_pc=-1) -> (M1_pc'=M1_TurnOff);
   [TurnOff] (M1_pc=M1_TurnOff) -> (M1_pc'=M1_ActivityFinal);
   [Terminate] (M1_pc=M1_ActivityFinal) -> (M1_pc'=M1_Terminated);
   [Terminiated] (M1_pc=M1_Terminated) -> true;
endmodule

